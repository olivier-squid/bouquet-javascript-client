/**
 * Bouquet
 * This is Bouquet API
 *
 * OpenAPI spec version: 4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Bouquet);
  }
}(this, function(expect, Bouquet) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Bouquet.ProjectAnalysisJob();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectAnalysisJob', function() {
    it('should create an instance of ProjectAnalysisJob', function() {
      // uncomment below and update the code to test ProjectAnalysisJob
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be.a(Bouquet.ProjectAnalysisJob);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property accessRights (base name: "accessRights")', function() {
      // uncomment below and update the code to test the property accessRights
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "error")', function() {
      // uncomment below and update the code to test the property error
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property statistics (base name: "statistics")', function() {
      // uncomment below and update the code to test the property statistics
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property resultsSize (base name: "resultsSize")', function() {
      // uncomment below and update the code to test the property resultsSize
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property temporary (base name: "temporary")', function() {
      // uncomment below and update the code to test the property temporary
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property autoRun (base name: "autoRun")', function() {
      // uncomment below and update the code to test the property autoRun
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "creationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property domains (base name: "domains")', function() {
      // uncomment below and update the code to test the property domains
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property dimensions (base name: "dimensions")', function() {
      // uncomment below and update the code to test the property dimensions
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property metrics (base name: "metrics")', function() {
      // uncomment below and update the code to test the property metrics
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property metricList (base name: "metricList")', function() {
      // uncomment below and update the code to test the property metricList
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property facets (base name: "facets")', function() {
      // uncomment below and update the code to test the property facets
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property rollups (base name: "rollups")', function() {
      // uncomment below and update the code to test the property rollups
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property selection (base name: "selection")', function() {
      // uncomment below and update the code to test the property selection
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property orderBy (base name: "orderBy")', function() {
      // uncomment below and update the code to test the property orderBy
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property offset (base name: "offset")', function() {
      // uncomment below and update the code to test the property offset
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property limit (base name: "limit")', function() {
      // uncomment below and update the code to test the property limit
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property beyondLimit (base name: "beyondLimit")', function() {
      // uncomment below and update the code to test the property beyondLimit
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property optionKeys (base name: "optionKeys")', function() {
      // uncomment below and update the code to test the property optionKeys
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property results (base name: "results")', function() {
      // uncomment below and update the code to test the property results
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property oid (base name: "oid")', function() {
      // uncomment below and update the code to test the property oid
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property objectType (base name: "objectType")', function() {
      // uncomment below and update the code to test the property objectType
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "_role")', function() {
      // uncomment below and update the code to test the property role
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

    it('should have the property vctrl (base name: "_vctrl")', function() {
      // uncomment below and update the code to test the property vctrl
      //var instane = new Bouquet.ProjectAnalysisJob();
      //expect(instance).to.be();
    });

  });

}));
