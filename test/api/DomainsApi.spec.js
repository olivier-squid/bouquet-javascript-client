/**
 * Bouquet
 * This is Bouquet API
 *
 * OpenAPI spec version: 4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Bouquet);
  }
}(this, function(expect, Bouquet) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Bouquet.DomainsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DomainsApi', function() {
    describe('addOptions', function() {
      it('should call addOptions successfully', function(done) {
        //uncomment below and update the code to test addOptions
        //instance.addOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNew', function() {
      it('should call createNew successfully', function(done) {
        //uncomment below and update the code to test createNew
        //instance.createNew(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAttribute', function() {
      it('should call deleteAttribute successfully', function(done) {
        //uncomment below and update the code to test deleteAttribute
        //instance.deleteAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDimension', function() {
      it('should call deleteDimension successfully', function(done) {
        //uncomment below and update the code to test deleteDimension
        //instance.deleteDimension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDomain', function() {
      it('should call deleteDomain successfully', function(done) {
        //uncomment below and update the code to test deleteDomain
        //instance.deleteDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMetric', function() {
      it('should call deleteMetric successfully', function(done) {
        //uncomment below and update the code to test deleteMetric
        //instance.deleteMetric(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOption', function() {
      it('should call deleteOption successfully', function(done) {
        //uncomment below and update the code to test deleteOption
        //instance.deleteOption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAttributeSuggestion', function() {
      it('should call getAttributeSuggestion successfully', function(done) {
        //uncomment below and update the code to test getAttributeSuggestion
        //instance.getAttributeSuggestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDimensionSuggestion', function() {
      it('should call getDimensionSuggestion successfully', function(done) {
        //uncomment below and update the code to test getDimensionSuggestion
        //instance.getDimensionSuggestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMetricSuggestion', function() {
      it('should call getMetricSuggestion successfully', function(done) {
        //uncomment below and update the code to test getMetricSuggestion
        //instance.getMetricSuggestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSegmentSuggestion', function() {
      it('should call getSegmentSuggestion successfully', function(done) {
        //uncomment below and update the code to test getSegmentSuggestion
        //instance.getSegmentSuggestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readAccessRightsAttribute', function() {
      it('should call readAccessRightsAttribute successfully', function(done) {
        //uncomment below and update the code to test readAccessRightsAttribute
        //instance.readAccessRightsAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readAccessRightsDimension', function() {
      it('should call readAccessRightsDimension successfully', function(done) {
        //uncomment below and update the code to test readAccessRightsDimension
        //instance.readAccessRightsDimension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readAccessRightsDomain', function() {
      it('should call readAccessRightsDomain successfully', function(done) {
        //uncomment below and update the code to test readAccessRightsDomain
        //instance.readAccessRightsDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readAccessRightsMetric', function() {
      it('should call readAccessRightsMetric successfully', function(done) {
        //uncomment below and update the code to test readAccessRightsMetric
        //instance.readAccessRightsMetric(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readAll', function() {
      it('should call readAll successfully', function(done) {
        //uncomment below and update the code to test readAll
        //instance.readAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readAllDimensions', function() {
      it('should call readAllDimensions successfully', function(done) {
        //uncomment below and update the code to test readAllDimensions
        //instance.readAllDimensions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readAttribute', function() {
      it('should call readAttribute successfully', function(done) {
        //uncomment below and update the code to test readAttribute
        //instance.readAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readAttributes', function() {
      it('should call readAttributes successfully', function(done) {
        //uncomment below and update the code to test readAttributes
        //instance.readAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCacheInfoDomain', function() {
      it('should call readCacheInfoDomain successfully', function(done) {
        //uncomment below and update the code to test readCacheInfoDomain
        //instance.readCacheInfoDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readDimension', function() {
      it('should call readDimension successfully', function(done) {
        //uncomment below and update the code to test readDimension
        //instance.readDimension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readDomain', function() {
      it('should call readDomain successfully', function(done) {
        //uncomment below and update the code to test readDomain
        //instance.readDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readDomains', function() {
      it('should call readDomains successfully', function(done) {
        //uncomment below and update the code to test readDomains
        //instance.readDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readMetric', function() {
      it('should call readMetric successfully', function(done) {
        //uncomment below and update the code to test readMetric
        //instance.readMetric(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readMetrics', function() {
      it('should call readMetrics successfully', function(done) {
        //uncomment below and update the code to test readMetrics
        //instance.readMetrics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOption', function() {
      it('should call readOption successfully', function(done) {
        //uncomment below and update the code to test readOption
        //instance.readOption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOptions', function() {
      it('should call readOptions successfully', function(done) {
        //uncomment below and update the code to test readOptions
        //instance.readOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readSubDimensions', function() {
      it('should call readSubDimensions successfully', function(done) {
        //uncomment below and update the code to test readSubDimensions
        //instance.readSubDimensions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshCacheDomain', function() {
      it('should call refreshCacheDomain successfully', function(done) {
        //uncomment below and update the code to test refreshCacheDomain
        //instance.refreshCacheDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshDomain', function() {
      it('should call refreshDomain successfully', function(done) {
        //uncomment below and update the code to test refreshDomain
        //instance.refreshDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeAccessRights', function() {
      it('should call storeAccessRights successfully', function(done) {
        //uncomment below and update the code to test storeAccessRights
        //instance.storeAccessRights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeAccessRightsDimension', function() {
      it('should call storeAccessRightsDimension successfully', function(done) {
        //uncomment below and update the code to test storeAccessRightsDimension
        //instance.storeAccessRightsDimension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeAccessRightsDomain', function() {
      it('should call storeAccessRightsDomain successfully', function(done) {
        //uncomment below and update the code to test storeAccessRightsDomain
        //instance.storeAccessRightsDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeAccessRightsMetric', function() {
      it('should call storeAccessRightsMetric successfully', function(done) {
        //uncomment below and update the code to test storeAccessRightsMetric
        //instance.storeAccessRightsMetric(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeAttribute', function() {
      it('should call storeAttribute successfully', function(done) {
        //uncomment below and update the code to test storeAttribute
        //instance.storeAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeAttribute2', function() {
      it('should call storeAttribute2 successfully', function(done) {
        //uncomment below and update the code to test storeAttribute2
        //instance.storeAttribute2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeDimension', function() {
      it('should call storeDimension successfully', function(done) {
        //uncomment below and update the code to test storeDimension
        //instance.storeDimension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeDimension2', function() {
      it('should call storeDimension2 successfully', function(done) {
        //uncomment below and update the code to test storeDimension2
        //instance.storeDimension2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeDomain', function() {
      it('should call storeDomain successfully', function(done) {
        //uncomment below and update the code to test storeDomain
        //instance.storeDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeDomain2', function() {
      it('should call storeDomain2 successfully', function(done) {
        //uncomment below and update the code to test storeDomain2
        //instance.storeDomain2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeMetric', function() {
      it('should call storeMetric successfully', function(done) {
        //uncomment below and update the code to test storeMetric
        //instance.storeMetric(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeMetric2', function() {
      it('should call storeMetric2 successfully', function(done) {
        //uncomment below and update the code to test storeMetric2
        //instance.storeMetric2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAttribute', function() {
      it('should call updateAttribute successfully', function(done) {
        //uncomment below and update the code to test updateAttribute
        //instance.updateAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDimension', function() {
      it('should call updateDimension successfully', function(done) {
        //uncomment below and update the code to test updateDimension
        //instance.updateDimension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDomain', function() {
      it('should call updateDomain successfully', function(done) {
        //uncomment below and update the code to test updateDomain
        //instance.updateDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMetric', function() {
      it('should call updateMetric successfully', function(done) {
        //uncomment below and update the code to test updateMetric
        //instance.updateMetric(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOptions', function() {
      it('should call updateOptions successfully', function(done) {
        //uncomment below and update the code to test updateOptions
        //instance.updateOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
