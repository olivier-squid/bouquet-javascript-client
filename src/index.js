/**
 * Bouquet
 * This is Bouquet API
 *
 * OpenAPI spec version: 4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessRight', 'model/AnalyticsQuery', 'model/Attribute', 'model/AttributePK', 'model/Bookmark', 'model/BookmarkPK', 'model/Col', 'model/DataTable', 'model/DatabaseInfo', 'model/Dimension', 'model/DimensionOption', 'model/DimensionOptionPK', 'model/DimensionPK', 'model/Domain', 'model/DomainOption', 'model/DomainPK', 'model/Error', 'model/Expression', 'model/ExpressionSuggestion', 'model/ExpressionSuggestionItem', 'model/ExtendedType', 'model/Facet', 'model/FacetExpression', 'model/FacetMember', 'model/FacetMemberInterval', 'model/FacetMemberString', 'model/FacetSelection', 'model/GenericPK', 'model/Index', 'model/Metric', 'model/MetricExt', 'model/MetricPK', 'model/OrderBy', 'model/Problem', 'model/Project', 'model/ProjectAnalysisJob', 'model/ProjectAnalysisJobPK', 'model/ProjectPK', 'model/QueryWorkerJobStatus', 'model/ReferencePKObject', 'model/Relation', 'model/RelationPK', 'model/RollUp', 'model/Row', 'model/StackTraceElement', 'model/Statistics', 'model/Throwable', 'api/AnalyticsApi', 'api/AttributesApi', 'api/DatabaseApi', 'api/DimensionsApi', 'api/DomainsApi', 'api/MetricsApi', 'api/ProjectsApi', 'api/RelationsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AccessRight'), require('./model/AnalyticsQuery'), require('./model/Attribute'), require('./model/AttributePK'), require('./model/Bookmark'), require('./model/BookmarkPK'), require('./model/Col'), require('./model/DataTable'), require('./model/DatabaseInfo'), require('./model/Dimension'), require('./model/DimensionOption'), require('./model/DimensionOptionPK'), require('./model/DimensionPK'), require('./model/Domain'), require('./model/DomainOption'), require('./model/DomainPK'), require('./model/Error'), require('./model/Expression'), require('./model/ExpressionSuggestion'), require('./model/ExpressionSuggestionItem'), require('./model/ExtendedType'), require('./model/Facet'), require('./model/FacetExpression'), require('./model/FacetMember'), require('./model/FacetMemberInterval'), require('./model/FacetMemberString'), require('./model/FacetSelection'), require('./model/GenericPK'), require('./model/Index'), require('./model/Metric'), require('./model/MetricExt'), require('./model/MetricPK'), require('./model/OrderBy'), require('./model/Problem'), require('./model/Project'), require('./model/ProjectAnalysisJob'), require('./model/ProjectAnalysisJobPK'), require('./model/ProjectPK'), require('./model/QueryWorkerJobStatus'), require('./model/ReferencePKObject'), require('./model/Relation'), require('./model/RelationPK'), require('./model/RollUp'), require('./model/Row'), require('./model/StackTraceElement'), require('./model/Statistics'), require('./model/Throwable'), require('./api/AnalyticsApi'), require('./api/AttributesApi'), require('./api/DatabaseApi'), require('./api/DimensionsApi'), require('./api/DomainsApi'), require('./api/MetricsApi'), require('./api/ProjectsApi'), require('./api/RelationsApi'));
  }
}(function(ApiClient, AccessRight, AnalyticsQuery, Attribute, AttributePK, Bookmark, BookmarkPK, Col, DataTable, DatabaseInfo, Dimension, DimensionOption, DimensionOptionPK, DimensionPK, Domain, DomainOption, DomainPK, Error, Expression, ExpressionSuggestion, ExpressionSuggestionItem, ExtendedType, Facet, FacetExpression, FacetMember, FacetMemberInterval, FacetMemberString, FacetSelection, GenericPK, Index, Metric, MetricExt, MetricPK, OrderBy, Problem, Project, ProjectAnalysisJob, ProjectAnalysisJobPK, ProjectPK, QueryWorkerJobStatus, ReferencePKObject, Relation, RelationPK, RollUp, Row, StackTraceElement, Statistics, Throwable, AnalyticsApi, AttributesApi, DatabaseApi, DimensionsApi, DomainsApi, MetricsApi, ProjectsApi, RelationsApi) {
  'use strict';

  /**
   * This_is_Bouquet_API.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Bouquet = require('index'); // See note below*.
   * var xxxSvc = new Bouquet.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Bouquet.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Bouquet.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Bouquet.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 4.2
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AccessRight model constructor.
     * @property {module:model/AccessRight}
     */
    AccessRight: AccessRight,
    /**
     * The AnalyticsQuery model constructor.
     * @property {module:model/AnalyticsQuery}
     */
    AnalyticsQuery: AnalyticsQuery,
    /**
     * The Attribute model constructor.
     * @property {module:model/Attribute}
     */
    Attribute: Attribute,
    /**
     * The AttributePK model constructor.
     * @property {module:model/AttributePK}
     */
    AttributePK: AttributePK,
    /**
     * The Bookmark model constructor.
     * @property {module:model/Bookmark}
     */
    Bookmark: Bookmark,
    /**
     * The BookmarkPK model constructor.
     * @property {module:model/BookmarkPK}
     */
    BookmarkPK: BookmarkPK,
    /**
     * The Col model constructor.
     * @property {module:model/Col}
     */
    Col: Col,
    /**
     * The DataTable model constructor.
     * @property {module:model/DataTable}
     */
    DataTable: DataTable,
    /**
     * The DatabaseInfo model constructor.
     * @property {module:model/DatabaseInfo}
     */
    DatabaseInfo: DatabaseInfo,
    /**
     * The Dimension model constructor.
     * @property {module:model/Dimension}
     */
    Dimension: Dimension,
    /**
     * The DimensionOption model constructor.
     * @property {module:model/DimensionOption}
     */
    DimensionOption: DimensionOption,
    /**
     * The DimensionOptionPK model constructor.
     * @property {module:model/DimensionOptionPK}
     */
    DimensionOptionPK: DimensionOptionPK,
    /**
     * The DimensionPK model constructor.
     * @property {module:model/DimensionPK}
     */
    DimensionPK: DimensionPK,
    /**
     * The Domain model constructor.
     * @property {module:model/Domain}
     */
    Domain: Domain,
    /**
     * The DomainOption model constructor.
     * @property {module:model/DomainOption}
     */
    DomainOption: DomainOption,
    /**
     * The DomainPK model constructor.
     * @property {module:model/DomainPK}
     */
    DomainPK: DomainPK,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Expression model constructor.
     * @property {module:model/Expression}
     */
    Expression: Expression,
    /**
     * The ExpressionSuggestion model constructor.
     * @property {module:model/ExpressionSuggestion}
     */
    ExpressionSuggestion: ExpressionSuggestion,
    /**
     * The ExpressionSuggestionItem model constructor.
     * @property {module:model/ExpressionSuggestionItem}
     */
    ExpressionSuggestionItem: ExpressionSuggestionItem,
    /**
     * The ExtendedType model constructor.
     * @property {module:model/ExtendedType}
     */
    ExtendedType: ExtendedType,
    /**
     * The Facet model constructor.
     * @property {module:model/Facet}
     */
    Facet: Facet,
    /**
     * The FacetExpression model constructor.
     * @property {module:model/FacetExpression}
     */
    FacetExpression: FacetExpression,
    /**
     * The FacetMember model constructor.
     * @property {module:model/FacetMember}
     */
    FacetMember: FacetMember,
    /**
     * The FacetMemberInterval model constructor.
     * @property {module:model/FacetMemberInterval}
     */
    FacetMemberInterval: FacetMemberInterval,
    /**
     * The FacetMemberString model constructor.
     * @property {module:model/FacetMemberString}
     */
    FacetMemberString: FacetMemberString,
    /**
     * The FacetSelection model constructor.
     * @property {module:model/FacetSelection}
     */
    FacetSelection: FacetSelection,
    /**
     * The GenericPK model constructor.
     * @property {module:model/GenericPK}
     */
    GenericPK: GenericPK,
    /**
     * The Index model constructor.
     * @property {module:model/Index}
     */
    Index: Index,
    /**
     * The Metric model constructor.
     * @property {module:model/Metric}
     */
    Metric: Metric,
    /**
     * The MetricExt model constructor.
     * @property {module:model/MetricExt}
     */
    MetricExt: MetricExt,
    /**
     * The MetricPK model constructor.
     * @property {module:model/MetricPK}
     */
    MetricPK: MetricPK,
    /**
     * The OrderBy model constructor.
     * @property {module:model/OrderBy}
     */
    OrderBy: OrderBy,
    /**
     * The Problem model constructor.
     * @property {module:model/Problem}
     */
    Problem: Problem,
    /**
     * The Project model constructor.
     * @property {module:model/Project}
     */
    Project: Project,
    /**
     * The ProjectAnalysisJob model constructor.
     * @property {module:model/ProjectAnalysisJob}
     */
    ProjectAnalysisJob: ProjectAnalysisJob,
    /**
     * The ProjectAnalysisJobPK model constructor.
     * @property {module:model/ProjectAnalysisJobPK}
     */
    ProjectAnalysisJobPK: ProjectAnalysisJobPK,
    /**
     * The ProjectPK model constructor.
     * @property {module:model/ProjectPK}
     */
    ProjectPK: ProjectPK,
    /**
     * The QueryWorkerJobStatus model constructor.
     * @property {module:model/QueryWorkerJobStatus}
     */
    QueryWorkerJobStatus: QueryWorkerJobStatus,
    /**
     * The ReferencePKObject model constructor.
     * @property {module:model/ReferencePKObject}
     */
    ReferencePKObject: ReferencePKObject,
    /**
     * The Relation model constructor.
     * @property {module:model/Relation}
     */
    Relation: Relation,
    /**
     * The RelationPK model constructor.
     * @property {module:model/RelationPK}
     */
    RelationPK: RelationPK,
    /**
     * The RollUp model constructor.
     * @property {module:model/RollUp}
     */
    RollUp: RollUp,
    /**
     * The Row model constructor.
     * @property {module:model/Row}
     */
    Row: Row,
    /**
     * The StackTraceElement model constructor.
     * @property {module:model/StackTraceElement}
     */
    StackTraceElement: StackTraceElement,
    /**
     * The Statistics model constructor.
     * @property {module:model/Statistics}
     */
    Statistics: Statistics,
    /**
     * The Throwable model constructor.
     * @property {module:model/Throwable}
     */
    Throwable: Throwable,
    /**
     * The AnalyticsApi service constructor.
     * @property {module:api/AnalyticsApi}
     */
    AnalyticsApi: AnalyticsApi,
    /**
     * The AttributesApi service constructor.
     * @property {module:api/AttributesApi}
     */
    AttributesApi: AttributesApi,
    /**
     * The DatabaseApi service constructor.
     * @property {module:api/DatabaseApi}
     */
    DatabaseApi: DatabaseApi,
    /**
     * The DimensionsApi service constructor.
     * @property {module:api/DimensionsApi}
     */
    DimensionsApi: DimensionsApi,
    /**
     * The DomainsApi service constructor.
     * @property {module:api/DomainsApi}
     */
    DomainsApi: DomainsApi,
    /**
     * The MetricsApi service constructor.
     * @property {module:api/MetricsApi}
     */
    MetricsApi: MetricsApi,
    /**
     * The ProjectsApi service constructor.
     * @property {module:api/ProjectsApi}
     */
    ProjectsApi: ProjectsApi,
    /**
     * The RelationsApi service constructor.
     * @property {module:api/RelationsApi}
     */
    RelationsApi: RelationsApi
  };

  return exports;
}));
