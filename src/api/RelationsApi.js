/**
 * Bouquet
 * This is Bouquet API
 *
 * OpenAPI spec version: 4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Relation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Relation'));
  } else {
    // Browser globals (root is window)
    if (!root.Bouquet) {
      root.Bouquet = {};
    }
    root.Bouquet.RelationsApi = factory(root.Bouquet.ApiClient, root.Bouquet.Relation);
  }
}(this, function(ApiClient, Relation) {
  'use strict';

  /**
   * Relations service.
   * @module api/RelationsApi
   * @version 4.2
   */

  /**
   * Constructs a new RelationsApi. 
   * @alias module:api/RelationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createNew operation.
     * @callback module:api/RelationsApi~createNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get new default relation for the Domain.
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/RelationsApi~createNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relation}
     */
    this.createNew = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling createNew");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling createNew");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Relation;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/relations/new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAll operation.
     * @callback module:api/RelationsApi~readAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Relation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Relations for the Domain.
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/RelationsApi~readAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Relation>}
     */
    this.readAll = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAll");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAll");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Relation];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/relations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
