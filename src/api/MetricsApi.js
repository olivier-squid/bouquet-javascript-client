/**
 * Bouquet
 * This is Bouquet API
 *
 * OpenAPI spec version: 4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessRight', 'model/Metric', 'model/MetricExt'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessRight'), require('../model/Metric'), require('../model/MetricExt'));
  } else {
    // Browser globals (root is window)
    if (!root.Bouquet) {
      root.Bouquet = {};
    }
    root.Bouquet.MetricsApi = factory(root.Bouquet.ApiClient, root.Bouquet.AccessRight, root.Bouquet.Metric, root.Bouquet.MetricExt);
  }
}(this, function(ApiClient, AccessRight, Metric, MetricExt) {
  'use strict';

  /**
   * Metrics service.
   * @module api/MetricsApi
   * @version 4.2
   */

  /**
   * Constructs a new MetricsApi. 
   * @alias module:api/MetricsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteMetric operation.
     * @callback module:api/MetricsApi~deleteMetricCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {module:api/MetricsApi~deleteMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.deleteMetric = function(projectId, domainId, metricId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling deleteMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling deleteMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAccessRightsMetric operation.
     * @callback module:api/MetricsApi~readAccessRightsMetricCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Metric&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {module:api/MetricsApi~readAccessRightsMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.readAccessRightsMetric = function(projectId, domainId, metricId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAccessRightsMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAccessRightsMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling readAccessRightsMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}/access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readMetric operation.
     * @callback module:api/MetricsApi~readMetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deepread 
     * @param {module:api/MetricsApi~readMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    this.readMetric = function(projectId, domainId, metricId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling readMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
        'deepread': opts['deepread']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readMetrics operation.
     * @callback module:api/MetricsApi~readMetricsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MetricExt>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets All Metrics
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/MetricsApi~readMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MetricExt>}
     */
    this.readMetrics = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readMetrics");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readMetrics");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [MetricExt];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAccessRightsMetric operation.
     * @callback module:api/MetricsApi~storeAccessRightsMetricCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a Metric&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {Array.<module:model/AccessRight>} body 
     * @param {module:api/MetricsApi~storeAccessRightsMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.storeAccessRightsMetric = function(projectId, domainId, metricId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAccessRightsMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAccessRightsMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling storeAccessRightsMetric");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAccessRightsMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}/access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeMetric operation.
     * @callback module:api/MetricsApi~storeMetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {module:model/Metric} body 
     * @param {module:api/MetricsApi~storeMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    this.storeMetric = function(projectId, domainId, metricId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling storeMetric");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeMetric2 operation.
     * @callback module:api/MetricsApi~storeMetric2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:model/Metric} body 
     * @param {module:api/MetricsApi~storeMetric2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    this.storeMetric2 = function(projectId, domainId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeMetric2");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeMetric2");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeMetric2");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMetric operation.
     * @callback module:api/MetricsApi~updateMetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {module:model/Metric} body 
     * @param {module:api/MetricsApi~updateMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    this.updateMetric = function(projectId, domainId, metricId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling updateMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling updateMetric");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
