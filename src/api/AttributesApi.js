/**
 * Bouquet
 * This is Bouquet API
 *
 * OpenAPI spec version: 4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessRight', 'model/Attribute'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessRight'), require('../model/Attribute'));
  } else {
    // Browser globals (root is window)
    if (!root.Bouquet) {
      root.Bouquet = {};
    }
    root.Bouquet.AttributesApi = factory(root.Bouquet.ApiClient, root.Bouquet.AccessRight, root.Bouquet.Attribute);
  }
}(this, function(ApiClient, AccessRight, Attribute) {
  'use strict';

  /**
   * Attributes service.
   * @module api/AttributesApi
   * @version 4.2
   */

  /**
   * Constructs a new AttributesApi. 
   * @alias module:api/AttributesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteAttribute operation.
     * @callback module:api/AttributesApi~deleteAttributeCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:api/AttributesApi~deleteAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.deleteAttribute = function(projectId, domainId, dimensionId, attributeId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling deleteAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling deleteAttribute");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling deleteAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAccessRightsAttribute operation.
     * @callback module:api/AttributesApi~readAccessRightsAttributeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Attribute&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:api/AttributesApi~readAccessRightsAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.readAccessRightsAttribute = function(projectId, domainId, dimensionId, attributeId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAccessRightsAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAccessRightsAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readAccessRightsAttribute");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling readAccessRightsAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}/access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAttribute operation.
     * @callback module:api/AttributesApi~readAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:api/AttributesApi~readAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.readAttribute = function(projectId, domainId, dimensionId, attributeId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readAttribute");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling readAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAttributes operation.
     * @callback module:api/AttributesApi~readAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attribute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:api/AttributesApi~readAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attribute>}
     */
    this.readAttributes = function(projectId, domainId, dimensionId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAttributes");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAttributes");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readAttributes");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Attribute];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAccessRights operation.
     * @callback module:api/AttributesApi~storeAccessRightsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets an Attribute&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {Array.<module:model/AccessRight>} body 
     * @param {module:api/AttributesApi~storeAccessRightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.storeAccessRights = function(projectId, domainId, dimensionId, attributeId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAccessRights");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAccessRights");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling storeAccessRights");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling storeAccessRights");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAccessRights");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}/access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAttribute operation.
     * @callback module:api/AttributesApi~storeAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:model/Attribute} body 
     * @param {module:api/AttributesApi~storeAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.storeAttribute = function(projectId, domainId, dimensionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling storeAttribute");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAttribute2 operation.
     * @callback module:api/AttributesApi~storeAttribute2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:model/Attribute} body 
     * @param {module:api/AttributesApi~storeAttribute2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.storeAttribute2 = function(projectId, domainId, dimensionId, attributeId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAttribute2");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAttribute2");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling storeAttribute2");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling storeAttribute2");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAttribute2");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAttribute operation.
     * @callback module:api/AttributesApi~updateAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:model/Attribute} body 
     * @param {module:api/AttributesApi~updateAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.updateAttribute = function(projectId, domainId, dimensionId, attributeId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling updateAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling updateAttribute");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling updateAttribute");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
