/**
 * Bouquet
 * This is Bouquet API
 *
 * OpenAPI spec version: 4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessRight', 'model/Attribute', 'model/DatabaseInfo', 'model/Dimension', 'model/DimensionOption', 'model/Domain', 'model/ExpressionSuggestion', 'model/Metric', 'model/MetricExt', 'model/Project', 'model/Relation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessRight'), require('../model/Attribute'), require('../model/DatabaseInfo'), require('../model/Dimension'), require('../model/DimensionOption'), require('../model/Domain'), require('../model/ExpressionSuggestion'), require('../model/Metric'), require('../model/MetricExt'), require('../model/Project'), require('../model/Relation'));
  } else {
    // Browser globals (root is window)
    if (!root.Bouquet) {
      root.Bouquet = {};
    }
    root.Bouquet.ProjectsApi = factory(root.Bouquet.ApiClient, root.Bouquet.AccessRight, root.Bouquet.Attribute, root.Bouquet.DatabaseInfo, root.Bouquet.Dimension, root.Bouquet.DimensionOption, root.Bouquet.Domain, root.Bouquet.ExpressionSuggestion, root.Bouquet.Metric, root.Bouquet.MetricExt, root.Bouquet.Project, root.Bouquet.Relation);
  }
}(this, function(ApiClient, AccessRight, Attribute, DatabaseInfo, Dimension, DimensionOption, Domain, ExpressionSuggestion, Metric, MetricExt, Project, Relation) {
  'use strict';

  /**
   * Projects service.
   * @module api/ProjectsApi
   * @version 4.2
   */

  /**
   * Constructs a new ProjectsApi. 
   * @alias module:api/ProjectsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addOptions operation.
     * @callback module:api/ProjectsApi~addOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DimensionOption>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a dimension option
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:model/DimensionOption} body 
     * @param {module:api/ProjectsApi~addOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DimensionOption>}
     */
    this.addOptions = function(projectId, domainId, dimensionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling addOptions");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling addOptions");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling addOptions");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling addOptions");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DimensionOption];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/ProjectsApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Project
     * 
     * @param {String} projectId 
     * @param {module:api/ProjectsApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.callDelete = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling callDelete");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/rs/projects/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNew operation.
     * @callback module:api/ProjectsApi~createNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get new default relation for the Domain.
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/ProjectsApi~createNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relation}
     */
    this.createNew = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling createNew");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling createNew");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Relation;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/relations/new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAttribute operation.
     * @callback module:api/ProjectsApi~deleteAttributeCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:api/ProjectsApi~deleteAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.deleteAttribute = function(projectId, domainId, dimensionId, attributeId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling deleteAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling deleteAttribute");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling deleteAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCache operation.
     * @callback module:api/ProjectsApi~deleteCacheCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh cache information for this project, including the database mapping
     * 
     * @param {String} projectId 
     * @param {module:api/ProjectsApi~deleteCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteCache = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteCache");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/cache', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDimension operation.
     * @callback module:api/ProjectsApi~deleteDimensionCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dimension
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:api/ProjectsApi~deleteDimensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.deleteDimension = function(projectId, domainId, dimensionId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteDimension");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling deleteDimension");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling deleteDimension");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomain operation.
     * @callback module:api/ProjectsApi~deleteDomainCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a domain
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/ProjectsApi~deleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.deleteDomain = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteDomain");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling deleteDomain");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMetric operation.
     * @callback module:api/ProjectsApi~deleteMetricCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {module:api/ProjectsApi~deleteMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.deleteMetric = function(projectId, domainId, metricId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling deleteMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling deleteMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOption operation.
     * @callback module:api/ProjectsApi~deleteOptionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DimensionOption>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dimension option
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} optionId 
     * @param {module:api/ProjectsApi~deleteOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DimensionOption>}
     */
    this.deleteOption = function(projectId, domainId, dimensionId, optionId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteOption");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling deleteOption");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling deleteOption");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteOption");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'optionId': optionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DimensionOption];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/options/{optionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the features operation.
     * @callback module:api/ProjectsApi~featuresCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Give the functions supported by the project
     * 
     * @param {String} projectId 
     * @param {module:api/ProjectsApi~featuresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.features = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling features");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributeSuggestion operation.
     * @callback module:api/ProjectsApi~getAttributeSuggestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressionSuggestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.expression 
     * @param {Number} opts.offset 
     * @param {module:model/String} opts.filterType 
     * @param {module:api/ProjectsApi~getAttributeSuggestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressionSuggestion}
     */
    this.getAttributeSuggestion = function(projectId, domainId, dimensionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getAttributeSuggestion");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling getAttributeSuggestion");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling getAttributeSuggestion");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
        'expression': opts['expression'],
        'offset': opts['offset'],
        'filterType': opts['filterType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ExpressionSuggestion;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes-suggestion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatabaseStatus operation.
     * @callback module:api/ProjectsApi~getDatabaseStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Database Status and vendor information
     * 
     * @param {String} projectId 
     * @param {module:api/ProjectsApi~getDatabaseStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseInfo}
     */
    this.getDatabaseStatus = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDatabaseStatus");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DatabaseInfo;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDimensionSuggestion operation.
     * @callback module:api/ProjectsApi~getDimensionSuggestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressionSuggestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets suggestions for a dimension definition
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.dimensionId 
     * @param {String} opts.expression 
     * @param {Number} opts.offset 
     * @param {module:model/String} opts.filterType 
     * @param {module:api/ProjectsApi~getDimensionSuggestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressionSuggestion}
     */
    this.getDimensionSuggestion = function(projectId, domainId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDimensionSuggestion");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling getDimensionSuggestion");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
        'dimensionId': opts['dimensionId'],
        'expression': opts['expression'],
        'offset': opts['offset'],
        'filterType': opts['filterType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ExpressionSuggestion;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions-suggestion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetricSuggestion operation.
     * @callback module:api/ProjectsApi~getMetricSuggestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressionSuggestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets suggestions for a metric definition
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.metricId 
     * @param {String} opts.expression 
     * @param {Number} opts.offset 
     * @param {module:model/String} opts.filterType 
     * @param {module:api/ProjectsApi~getMetricSuggestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressionSuggestion}
     */
    this.getMetricSuggestion = function(projectId, domainId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getMetricSuggestion");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling getMetricSuggestion");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
        'metricId': opts['metricId'],
        'expression': opts['expression'],
        'offset': opts['offset'],
        'filterType': opts['filterType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ExpressionSuggestion;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics-suggestion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegmentSuggestion operation.
     * @callback module:api/ProjectsApi~getSegmentSuggestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressionSuggestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets suggestions for a segment definition
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.expression 
     * @param {Number} opts.offset 
     * @param {module:model/String} opts.filterType 
     * @param {module:api/ProjectsApi~getSegmentSuggestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressionSuggestion}
     */
    this.getSegmentSuggestion = function(projectId, domainId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getSegmentSuggestion");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling getSegmentSuggestion");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
        'expression': opts['expression'],
        'offset': opts['offset'],
        'filterType': opts['filterType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ExpressionSuggestion;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/segment-suggestion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the read operation.
     * @callback module:api/ProjectsApi~readCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Project
     * 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deepread 
     * @param {module:api/ProjectsApi~readCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.read = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling read");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'deepread': opts['deepread']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAccessRightsAttribute operation.
     * @callback module:api/ProjectsApi~readAccessRightsAttributeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Attribute&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:api/ProjectsApi~readAccessRightsAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.readAccessRightsAttribute = function(projectId, domainId, dimensionId, attributeId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAccessRightsAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAccessRightsAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readAccessRightsAttribute");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling readAccessRightsAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}/access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAccessRightsDimension operation.
     * @callback module:api/ProjectsApi~readAccessRightsDimensionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a dimension&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:api/ProjectsApi~readAccessRightsDimensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.readAccessRightsDimension = function(projectId, domainId, dimensionId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAccessRightsDimension");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAccessRightsDimension");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readAccessRightsDimension");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAccessRightsDomain operation.
     * @callback module:api/ProjectsApi~readAccessRightsDomainCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a domain&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/ProjectsApi~readAccessRightsDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.readAccessRightsDomain = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAccessRightsDomain");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAccessRightsDomain");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAccessRightsMetric operation.
     * @callback module:api/ProjectsApi~readAccessRightsMetricCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Metric&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {module:api/ProjectsApi~readAccessRightsMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.readAccessRightsMetric = function(projectId, domainId, metricId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAccessRightsMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAccessRightsMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling readAccessRightsMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}/access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAll operation.
     * @callback module:api/ProjectsApi~readAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Relation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Relations for the Domain.
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/ProjectsApi~readAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Relation>}
     */
    this.readAll = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAll");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAll");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Relation];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/relations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAllDimensions operation.
     * @callback module:api/ProjectsApi~readAllDimensionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Dimension>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Dimensions for the Domain (including child dimensions).
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/ProjectsApi~readAllDimensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Dimension>}
     */
    this.readAllDimensions = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAllDimensions");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAllDimensions");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Dimension];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAttribute operation.
     * @callback module:api/ProjectsApi~readAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:api/ProjectsApi~readAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.readAttribute = function(projectId, domainId, dimensionId, attributeId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readAttribute");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling readAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAttributes operation.
     * @callback module:api/ProjectsApi~readAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attribute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:api/ProjectsApi~readAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attribute>}
     */
    this.readAttributes = function(projectId, domainId, dimensionId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readAttributes");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readAttributes");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readAttributes");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Attribute];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCacheInfo operation.
     * @callback module:api/ProjectsApi~readCacheInfoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display cache information for this project
     * 
     * @param {String} projectId 
     * @param {module:api/ProjectsApi~readCacheInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.readCacheInfo = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readCacheInfo");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/cache', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCacheInfoDomain operation.
     * @callback module:api/ProjectsApi~readCacheInfoDomainCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets cache status for this domain
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/ProjectsApi~readCacheInfoDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.readCacheInfoDomain = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readCacheInfoDomain");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readCacheInfoDomain");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/cache', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readDimension operation.
     * @callback module:api/ProjectsApi~readDimensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dimension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a dimension
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deepread 
     * @param {module:api/ProjectsApi~readDimensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dimension}
     */
    this.readDimension = function(projectId, domainId, dimensionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readDimension");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readDimension");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readDimension");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
        'deepread': opts['deepread']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Dimension;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readDomain operation.
     * @callback module:api/ProjectsApi~readDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Domain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a domain
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deepread 
     * @param {module:api/ProjectsApi~readDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Domain}
     */
    this.readDomain = function(projectId, domainId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readDomain");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readDomain");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
        'deepread': opts['deepread']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Domain;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readDomains operation.
     * @callback module:api/ProjectsApi~readDomainsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Domain>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all domains
     * 
     * @param {String} projectId 
     * @param {module:api/ProjectsApi~readDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Domain>}
     */
    this.readDomains = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readDomains");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Domain];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readMetric operation.
     * @callback module:api/ProjectsApi~readMetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deepread 
     * @param {module:api/ProjectsApi~readMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    this.readMetric = function(projectId, domainId, metricId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling readMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
        'deepread': opts['deepread']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readMetrics operation.
     * @callback module:api/ProjectsApi~readMetricsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MetricExt>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets All Metrics
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/ProjectsApi~readMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MetricExt>}
     */
    this.readMetrics = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readMetrics");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readMetrics");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [MetricExt];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readOption operation.
     * @callback module:api/ProjectsApi~readOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DimensionOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a dimension option
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} optionId 
     * @param {module:api/ProjectsApi~readOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DimensionOption}
     */
    this.readOption = function(projectId, domainId, dimensionId, optionId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readOption");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readOption");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readOption");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling readOption");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'optionId': optionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DimensionOption;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/options/{optionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readOptions operation.
     * @callback module:api/ProjectsApi~readOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DimensionOption>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all dimension options
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:api/ProjectsApi~readOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DimensionOption>}
     */
    this.readOptions = function(projectId, domainId, dimensionId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readOptions");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readOptions");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readOptions");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DimensionOption];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readProjects operation.
     * @callback module:api/ProjectsApi~readProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets All Project
     * 
     * @param {module:api/ProjectsApi~readProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    this.readProjects = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Project];

      return this.apiClient.callApi(
        '/rs/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readSchema operation.
     * @callback module:api/ProjectsApi~readSchemaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list the schema&#39;s tables
     * 
     * @param {String} projectId 
     * @param {String} schemaName 
     * @param {module:api/ProjectsApi~readSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.readSchema = function(projectId, schemaName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readSchema");
      }

      // verify the required parameter 'schemaName' is set
      if (schemaName == undefined || schemaName == null) {
        throw new Error("Missing the required parameter 'schemaName' when calling readSchema");
      }


      var pathParams = {
        'projectId': projectId,
        'schemaName': schemaName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database/schemas/{schemaName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readSchemas operation.
     * @callback module:api/ProjectsApi~readSchemasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list the database schemas
     * 
     * @param {String} projectId 
     * @param {module:api/ProjectsApi~readSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.readSchemas = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readSchemas");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readSubDimensions operation.
     * @callback module:api/ProjectsApi~readSubDimensionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Dimension>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the SubDimensions
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:api/ProjectsApi~readSubDimensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Dimension>}
     */
    this.readSubDimensions = function(projectId, domainId, dimensionId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readSubDimensions");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling readSubDimensions");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling readSubDimensions");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Dimension];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/subdimensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readTable operation.
     * @callback module:api/ProjectsApi~readTableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the table definition
     * 
     * @param {String} projectId 
     * @param {String} schemaName 
     * @param {String} tableName 
     * @param {module:api/ProjectsApi~readTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.readTable = function(projectId, schemaName, tableName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readTable");
      }

      // verify the required parameter 'schemaName' is set
      if (schemaName == undefined || schemaName == null) {
        throw new Error("Missing the required parameter 'schemaName' when calling readTable");
      }

      // verify the required parameter 'tableName' is set
      if (tableName == undefined || tableName == null) {
        throw new Error("Missing the required parameter 'tableName' when calling readTable");
      }


      var pathParams = {
        'projectId': projectId,
        'schemaName': schemaName,
        'tableName': tableName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database/schemas/{schemaName}/tables/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshCache operation.
     * @callback module:api/ProjectsApi~refreshCacheCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh cache information for this project, including the database mapping
     * 
     * @param {String} projectId 
     * @param {module:api/ProjectsApi~refreshCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.refreshCache = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling refreshCache");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/cache/refresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshCacheDomain operation.
     * @callback module:api/ProjectsApi~refreshCacheDomainCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force a cache refresh for this domain
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/ProjectsApi~refreshCacheDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.refreshCacheDomain = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling refreshCacheDomain");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling refreshCacheDomain");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/cache/refresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshDomain operation.
     * @callback module:api/ProjectsApi~refreshDomainCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:api/ProjectsApi~refreshDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.refreshDomain = function(projectId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling refreshDomain");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling refreshDomain");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/refreshData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshTable operation.
     * @callback module:api/ProjectsApi~refreshTableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * refresh the table definition. If it is a new table, makes it available. Note that this won&#39;t clear the cache.
     * 
     * @param {String} projectId 
     * @param {String} schemaName 
     * @param {String} tableName 
     * @param {module:api/ProjectsApi~refreshTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.refreshTable = function(projectId, schemaName, tableName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling refreshTable");
      }

      // verify the required parameter 'schemaName' is set
      if (schemaName == undefined || schemaName == null) {
        throw new Error("Missing the required parameter 'schemaName' when calling refreshTable");
      }

      // verify the required parameter 'tableName' is set
      if (tableName == undefined || tableName == null) {
        throw new Error("Missing the required parameter 'tableName' when calling refreshTable");
      }


      var pathParams = {
        'projectId': projectId,
        'schemaName': schemaName,
        'tableName': tableName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database/schemas/{schemaName}/tables/{tableName}/refresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAccessRights operation.
     * @callback module:api/ProjectsApi~storeAccessRightsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets an Attribute&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {Array.<module:model/AccessRight>} body 
     * @param {module:api/ProjectsApi~storeAccessRightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.storeAccessRights = function(projectId, domainId, dimensionId, attributeId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAccessRights");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAccessRights");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling storeAccessRights");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling storeAccessRights");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAccessRights");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}/access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAccessRightsDimension operation.
     * @callback module:api/ProjectsApi~storeAccessRightsDimensionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a dimension&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {Array.<module:model/AccessRight>} body 
     * @param {module:api/ProjectsApi~storeAccessRightsDimensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.storeAccessRightsDimension = function(projectId, domainId, dimensionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAccessRightsDimension");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAccessRightsDimension");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling storeAccessRightsDimension");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAccessRightsDimension");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAccessRightsDomain operation.
     * @callback module:api/ProjectsApi~storeAccessRightsDomainCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a domain&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {Array.<module:model/AccessRight>} body 
     * @param {module:api/ProjectsApi~storeAccessRightsDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.storeAccessRightsDomain = function(projectId, domainId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAccessRightsDomain");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAccessRightsDomain");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAccessRightsDomain");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAccessRightsMetric operation.
     * @callback module:api/ProjectsApi~storeAccessRightsMetricCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessRight>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a Metric&#39;s access rights
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {Array.<module:model/AccessRight>} body 
     * @param {module:api/ProjectsApi~storeAccessRightsMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessRight>}
     */
    this.storeAccessRightsMetric = function(projectId, domainId, metricId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAccessRightsMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAccessRightsMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling storeAccessRightsMetric");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAccessRightsMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccessRight];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}/access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAttribute operation.
     * @callback module:api/ProjectsApi~storeAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:model/Attribute} body 
     * @param {module:api/ProjectsApi~storeAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.storeAttribute = function(projectId, domainId, dimensionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling storeAttribute");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAttribute2 operation.
     * @callback module:api/ProjectsApi~storeAttribute2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:model/Attribute} body 
     * @param {module:api/ProjectsApi~storeAttribute2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.storeAttribute2 = function(projectId, domainId, dimensionId, attributeId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeAttribute2");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeAttribute2");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling storeAttribute2");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling storeAttribute2");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeAttribute2");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeDimension operation.
     * @callback module:api/ProjectsApi~storeDimensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dimension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a dimension
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:model/Dimension} body 
     * @param {module:api/ProjectsApi~storeDimensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dimension}
     */
    this.storeDimension = function(projectId, domainId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeDimension");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeDimension");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeDimension");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Dimension;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeDimension2 operation.
     * @callback module:api/ProjectsApi~storeDimension2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Dimension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a dimension
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:model/Dimension} body 
     * @param {module:api/ProjectsApi~storeDimension2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dimension}
     */
    this.storeDimension2 = function(projectId, domainId, dimensionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeDimension2");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeDimension2");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling storeDimension2");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeDimension2");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Dimension;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeDomain operation.
     * @callback module:api/ProjectsApi~storeDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Domain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a domain
     * 
     * @param {String} projectId 
     * @param {module:model/Domain} body 
     * @param {module:api/ProjectsApi~storeDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Domain}
     */
    this.storeDomain = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeDomain");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeDomain");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Domain;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeDomain2 operation.
     * @callback module:api/ProjectsApi~storeDomain2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Domain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a domain
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:model/Domain} body 
     * @param {module:api/ProjectsApi~storeDomain2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Domain}
     */
    this.storeDomain2 = function(projectId, domainId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeDomain2");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeDomain2");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeDomain2");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Domain;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeMetric operation.
     * @callback module:api/ProjectsApi~storeMetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {module:model/Metric} body 
     * @param {module:api/ProjectsApi~storeMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    this.storeMetric = function(projectId, domainId, metricId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling storeMetric");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeMetric2 operation.
     * @callback module:api/ProjectsApi~storeMetric2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:model/Metric} body 
     * @param {module:api/ProjectsApi~storeMetric2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    this.storeMetric2 = function(projectId, domainId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeMetric2");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling storeMetric2");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeMetric2");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeProject operation.
     * @callback module:api/ProjectsApi~storeProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Project
     * 
     * @param {module:model/Project} body 
     * @param {module:api/ProjectsApi~storeProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.storeProject = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeProject");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/rs/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storeProject2 operation.
     * @callback module:api/ProjectsApi~storeProject2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Project
     * 
     * @param {String} projectId 
     * @param {module:model/Project} body 
     * @param {module:api/ProjectsApi~storeProject2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.storeProject2 = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling storeProject2");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling storeProject2");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/ProjectsApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Project
     * 
     * @param {module:model/Project} body 
     * @param {module:api/ProjectsApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.update = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling update");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/rs/projects', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAttribute operation.
     * @callback module:api/ProjectsApi~updateAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Attribute
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} attributeId 
     * @param {module:model/Attribute} body 
     * @param {module:api/ProjectsApi~updateAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.updateAttribute = function(projectId, domainId, dimensionId, attributeId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateAttribute");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling updateAttribute");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling updateAttribute");
      }

      // verify the required parameter 'attributeId' is set
      if (attributeId == undefined || attributeId == null) {
        throw new Error("Missing the required parameter 'attributeId' when calling updateAttribute");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateAttribute");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/attributes/{attributeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDimension operation.
     * @callback module:api/ProjectsApi~updateDimensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dimension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a dimension
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {module:model/Dimension} body 
     * @param {module:api/ProjectsApi~updateDimensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dimension}
     */
    this.updateDimension = function(projectId, domainId, dimensionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateDimension");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling updateDimension");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling updateDimension");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateDimension");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Dimension;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomain operation.
     * @callback module:api/ProjectsApi~updateDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Domain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a domain
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {module:model/Domain} body 
     * @param {module:api/ProjectsApi~updateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Domain}
     */
    this.updateDomain = function(projectId, domainId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateDomain");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling updateDomain");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateDomain");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Domain;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMetric operation.
     * @callback module:api/ProjectsApi~updateMetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Metric
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} metricId 
     * @param {module:model/Metric} body 
     * @param {module:api/ProjectsApi~updateMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    this.updateMetric = function(projectId, domainId, metricId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateMetric");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling updateMetric");
      }

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw new Error("Missing the required parameter 'metricId' when calling updateMetric");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateMetric");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'metricId': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/metrics/{metricId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOptions operation.
     * @callback module:api/ProjectsApi~updateOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DimensionOption>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a dimension option
     * 
     * @param {String} projectId 
     * @param {String} domainId 
     * @param {String} dimensionId 
     * @param {String} optionId 
     * @param {module:model/DimensionOption} body 
     * @param {module:api/ProjectsApi~updateOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DimensionOption>}
     */
    this.updateOptions = function(projectId, domainId, dimensionId, optionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateOptions");
      }

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling updateOptions");
      }

      // verify the required parameter 'dimensionId' is set
      if (dimensionId == undefined || dimensionId == null) {
        throw new Error("Missing the required parameter 'dimensionId' when calling updateOptions");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling updateOptions");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateOptions");
      }


      var pathParams = {
        'projectId': projectId,
        'domainId': domainId,
        'dimensionId': dimensionId,
        'optionId': optionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DimensionOption];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/domains/{domainId}/dimensions/{dimensionId}/options/{optionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ProjectsApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Project
     * 
     * @param {String} projectId 
     * @param {module:model/Project} body 
     * @param {module:api/ProjectsApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.updateProject = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProject");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateProject");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
