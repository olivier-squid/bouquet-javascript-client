/**
 * Bouquet
 * This is Bouquet API
 *
 * OpenAPI spec version: 4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DatabaseInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DatabaseInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Bouquet) {
      root.Bouquet = {};
    }
    root.Bouquet.DatabaseApi = factory(root.Bouquet.ApiClient, root.Bouquet.DatabaseInfo);
  }
}(this, function(ApiClient, DatabaseInfo) {
  'use strict';

  /**
   * Database service.
   * @module api/DatabaseApi
   * @version 4.2
   */

  /**
   * Constructs a new DatabaseApi. 
   * @alias module:api/DatabaseApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDatabaseStatus operation.
     * @callback module:api/DatabaseApi~getDatabaseStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Database Status and vendor information
     * 
     * @param {String} projectId 
     * @param {module:api/DatabaseApi~getDatabaseStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseInfo}
     */
    this.getDatabaseStatus = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDatabaseStatus");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DatabaseInfo;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readSchema operation.
     * @callback module:api/DatabaseApi~readSchemaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list the schema&#39;s tables
     * 
     * @param {String} projectId 
     * @param {String} schemaName 
     * @param {module:api/DatabaseApi~readSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.readSchema = function(projectId, schemaName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readSchema");
      }

      // verify the required parameter 'schemaName' is set
      if (schemaName == undefined || schemaName == null) {
        throw new Error("Missing the required parameter 'schemaName' when calling readSchema");
      }


      var pathParams = {
        'projectId': projectId,
        'schemaName': schemaName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database/schemas/{schemaName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readSchemas operation.
     * @callback module:api/DatabaseApi~readSchemasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list the database schemas
     * 
     * @param {String} projectId 
     * @param {module:api/DatabaseApi~readSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.readSchemas = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readSchemas");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readTable operation.
     * @callback module:api/DatabaseApi~readTableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the table definition
     * 
     * @param {String} projectId 
     * @param {String} schemaName 
     * @param {String} tableName 
     * @param {module:api/DatabaseApi~readTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.readTable = function(projectId, schemaName, tableName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling readTable");
      }

      // verify the required parameter 'schemaName' is set
      if (schemaName == undefined || schemaName == null) {
        throw new Error("Missing the required parameter 'schemaName' when calling readTable");
      }

      // verify the required parameter 'tableName' is set
      if (tableName == undefined || tableName == null) {
        throw new Error("Missing the required parameter 'tableName' when calling readTable");
      }


      var pathParams = {
        'projectId': projectId,
        'schemaName': schemaName,
        'tableName': tableName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database/schemas/{schemaName}/tables/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshTable operation.
     * @callback module:api/DatabaseApi~refreshTableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * refresh the table definition. If it is a new table, makes it available. Note that this won&#39;t clear the cache.
     * 
     * @param {String} projectId 
     * @param {String} schemaName 
     * @param {String} tableName 
     * @param {module:api/DatabaseApi~refreshTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.refreshTable = function(projectId, schemaName, tableName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling refreshTable");
      }

      // verify the required parameter 'schemaName' is set
      if (schemaName == undefined || schemaName == null) {
        throw new Error("Missing the required parameter 'schemaName' when calling refreshTable");
      }

      // verify the required parameter 'tableName' is set
      if (tableName == undefined || tableName == null) {
        throw new Error("Missing the required parameter 'tableName' when calling refreshTable");
      }


      var pathParams = {
        'projectId': projectId,
        'schemaName': schemaName,
        'tableName': tableName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['kraken_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/rs/projects/{projectId}/database/schemas/{schemaName}/tables/{tableName}/refresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
