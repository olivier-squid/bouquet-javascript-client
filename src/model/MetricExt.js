/**
 * Bouquet
 * This is Bouquet API
 *
 * OpenAPI spec version: 4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessRight', 'model/Expression', 'model/MetricPK'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccessRight'), require('./Expression'), require('./MetricPK'));
  } else {
    // Browser globals (root is window)
    if (!root.Bouquet) {
      root.Bouquet = {};
    }
    root.Bouquet.MetricExt = factory(root.Bouquet.ApiClient, root.Bouquet.AccessRight, root.Bouquet.Expression, root.Bouquet.MetricPK);
  }
}(this, function(ApiClient, AccessRight, Expression, MetricPK) {
  'use strict';




  /**
   * The MetricExt model module.
   * @module model/MetricExt
   * @version 4.2
   */

  /**
   * Constructs a new <code>MetricExt</code>.
   * @alias module:model/MetricExt
   * @class
   */
  var exports = function() {
    var _this = this;














  };

  /**
   * Constructs a <code>MetricExt</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MetricExt} obj Optional instance to populate.
   * @return {module:model/MetricExt} The populated <code>MetricExt</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = MetricPK.constructFromObject(data['id']);
      }
      if (data.hasOwnProperty('accessRights')) {
        obj['accessRights'] = ApiClient.convertToType(data['accessRights'], [AccessRight]);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('expression')) {
        obj['expression'] = Expression.constructFromObject(data['expression']);
      }
      if (data.hasOwnProperty('definition')) {
        obj['definition'] = ApiClient.convertToType(data['definition'], 'String');
      }
      if (data.hasOwnProperty('visible')) {
        obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
      }
      if (data.hasOwnProperty('valueType')) {
        obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
      }
      if (data.hasOwnProperty('dynamic')) {
        obj['dynamic'] = ApiClient.convertToType(data['dynamic'], 'Boolean');
      }
      if (data.hasOwnProperty('oid')) {
        obj['oid'] = ApiClient.convertToType(data['oid'], 'String');
      }
      if (data.hasOwnProperty('objectType')) {
        obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
      }
      if (data.hasOwnProperty('_role')) {
        obj['_role'] = ApiClient.convertToType(data['_role'], 'String');
      }
      if (data.hasOwnProperty('_vctrl')) {
        obj['_vctrl'] = ApiClient.convertToType(data['_vctrl'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
    }
    return obj;
  }

  /**
   * The object Composite Id (Primary Key)
   * @member {module:model/MetricPK} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The ACL for this object
   * @member {Array.<module:model/AccessRight>} accessRights
   */
  exports.prototype['accessRights'] = undefined;
  /**
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * @member {module:model/Expression} expression
   */
  exports.prototype['expression'] = undefined;
  /**
   * @member {String} definition
   */
  exports.prototype['definition'] = undefined;
  /**
   * @member {Boolean} visible
   * @default false
   */
  exports.prototype['visible'] = false;
  /**
   * @member {module:model/MetricExt.ValueTypeEnum} valueType
   */
  exports.prototype['valueType'] = undefined;
  /**
   * indicates if the object is automatically generated. This property can be updated.
   * @member {Boolean} dynamic
   * @default false
   */
  exports.prototype['dynamic'] = false;
  /**
   * The Object Id
   * @member {String} oid
   */
  exports.prototype['oid'] = undefined;
  /**
   * @member {String} objectType
   */
  exports.prototype['objectType'] = undefined;
  /**
   * The role of the current User (passed in the context) over this object
   * @member {module:model/MetricExt.RoleEnum} _role
   */
  exports.prototype['_role'] = undefined;
  /**
   * Internal version control value. (used by optimistic-locking mechanism)
   * @member {Number} _vctrl
   */
  exports.prototype['_vctrl'] = undefined;
  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;


  /**
   * Allowed values for the <code>valueType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ValueTypeEnum = {
    /**
     * value: "OBJECT"
     * @const
     */
    "OBJECT": "OBJECT",
    /**
     * value: "NUMERIC"
     * @const
     */
    "NUMERIC": "NUMERIC",
    /**
     * value: "AGGREGATE"
     * @const
     */
    "AGGREGATE": "AGGREGATE",
    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",
    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",
    /**
     * value: "CONDITION"
     * @const
     */
    "CONDITION": "CONDITION",
    /**
     * value: "LINK"
     * @const
     */
    "LINK": "LINK",
    /**
     * value: "TABLE"
     * @const
     */
    "TABLE": "TABLE",
    /**
     * value: "VIEW"
     * @const
     */
    "VIEW": "VIEW",
    /**
     * value: "DOMAIN"
     * @const
     */
    "DOMAIN": "DOMAIN",
    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER",
    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"  };

  /**
   * Allowed values for the <code>_role</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RoleEnum = {
    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",
    /**
     * value: "EXECUTE"
     * @const
     */
    "EXECUTE": "EXECUTE",
    /**
     * value: "READ"
     * @const
     */
    "READ": "READ",
    /**
     * value: "WRITE"
     * @const
     */
    "WRITE": "WRITE",
    /**
     * value: "OWNER"
     * @const
     */
    "OWNER": "OWNER"  };


  return exports;
}));


